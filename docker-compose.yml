# Drilunia Backend - Docker Compose
# Infraestructura completa para chat, llamadas, archivos y notificaciones

version: '3.8'

services:
  # MongoDB - Base de datos principal
  mongo:
    image: mongo:7.0
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: drilunia123
      MONGO_INITDB_DATABASE: drilunia
    volumes:
      - mongo-data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - drilunia-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis - Cache y sesiones
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass drilunia123 --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - drilunia-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "drilunia123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MinIO - Almacenamiento de archivos
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: drilunia
      MINIO_ROOT_PASSWORD: drilunia123
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - drilunia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Coturn - Servidor STUN/TURN para WebRTC
  coturn:
    image: coturn/coturn:4.6.2
    restart: unless-stopped
    environment:
      - TZ=UTC
    volumes:
      - ./config/coturn.conf:/etc/coturn/turnserver.conf:ro
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "5349:5349/tcp"
    networks:
      - drilunia-network
    healthcheck:
      test: ["CMD", "timeout", "10", "bash", "-c", "echo 'test' | nc -u localhost 3478 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Drilunia
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGO_URI=mongodb://admin:drilunia123@mongo:27017/drilunia?authSource=admin
      - REDIS_URL=redis://:drilunia123@redis:6379
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=drilunia
      - MINIO_SECRET_KEY=drilunia123
      - MINIO_BUCKET=drilunia-media
      - MINIO_USE_SSL=false
      - TURN_URLS=turn:coturn:3478
      - TURN_USER=drilunia
      - TURN_PASS=drilunia123
      - STUN_URLS=stun:coturn:3478
      - JWT_SECRET=supersecreto_jwt_drilunia
      - JWT_REFRESH_SECRET=supersecreto_refresh_drilunia
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    networks:
      - drilunia-network
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      coturn:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx - Proxy reverso y SSL
  nginx:
    image: nginx:1.25-alpine
    restart: unless-stopped
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - nginx-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - drilunia-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus - Monitoreo
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - drilunia-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Grafana - Visualización de métricas
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=drilunia123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - drilunia-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  mongo-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  drilunia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 